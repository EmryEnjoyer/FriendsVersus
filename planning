Game.db
    - challenges
        gameId PRIMARY KEY      usergroupId Integer     ChallengerId Integer        ChallengedId Integer        ChallengerMmr Integer       ChallengedMmr Integer       Accepted Bool       InviteUrl String
    - games
        gameId PRIMARY KEY      usergroupId Integer     playerOneId Integer     playerTwoId Integer         ScorePlayerOne Integer      ScorePlayerTwo Integer     isActive Bool
    - gameUrls
        gameUrlId       gameId      InviteLinks
    - Users
        userId PRIMARY KEY      username      passwd String         Email String       dateJoined String       banned Bool
    - UserVerificationLinks
        userId PRIMARY KEY      VerificationLink String
    - Usergrouplist
        usergroupId PRIMARY KEY     usergroupName String        userGroupOwnerId Integer
    - UserGroupInvites
        usergroupId PRIMARY KEY     invite String
    - usergroupMembership
        (usergroupId Integer userId Integer) COMPOSITE PRIMARY KEY      wins Integer      losses Integer        role String         banned Bool
    - mmrDistribution
        (usergroupId Integer userId Integer) COMPOSITE PRIMARY KEY      Mmr Integer

DTOs needed:
    GetUserRequest: returns User DTO
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body: {username:}

    User
    Header: {}
    Body:
    {
        userId:
        username:
        email:
        dateJoined:
        privileges:
    }

    GetGroupRequest: returns Group DTO
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    
    Group
    Header: {}
    Body:
    {
        groupId:
        groupName:
        memberCount:
        dateCreated:
        defaultMmr:
    }
    
    GroupInviteRequest returns GroupInviteResponse DTO
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body: {
        groupId:
        userId:
        oneTimeUse:
        timeExtent:
    }

    GroupInviteResponse
    Header: {uniqueInviteLink:}

    UserLoginRequest returns TokenResponse
        Header: {Authorization: ApiToken <Token>}
        Body: {username: 
        passwd:}
    
    TokenResponse
        Header: {Authorization: Bearer <Token>}
        Body: {}
    
    UserCreationRequest returns UserCreationResponse
    Header: {Authorization: Bearer <ApiToken>, Authorization: ApiKey <Token>}
    Body: {
        Username:
        Email:
    }
    
    UserCreationResponse
    Header: {}
    Body: {
        RedirectUrl:
    }
    
    UserEmailAuthenticationRequest returns UserEmailAuthenticationResponse
    Header: {Authorization: Bearer <TempToken>, Authorization: ApiKey <Token>}
    Body: {
        Password: (Hashed)
    }
    
    UserEmailAuthenticationResponse
    Header: {Authorization: Bearer <Token>}
    
    GroupCreationRequest returns OK or unauthorizedaccess
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        GroupName:
        DefaultMmr:
        Access:
        MaxMembers:
    }

    GroupDeletionRequest returns OK or excepts
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        GroupName:
        userId
    }

    ChallengeSendRequest returns ChallengeSendResponse
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        challengerName:
        challengedName:
        groupId:
    }

    ChallengeSendResponse:
    Header: {WaitingRoomURL: }

    ChallengeAcceptRequest returns ChallengeAcceptResponse
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        gameId:
    }

    ChallengeAcceptResponse
    Header: {gameUrl:}

    ChallengeDeleteRequest returns ChallengeDeleteResponse
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        gameId:
    }

    ChallengeDeleteResponse
    Header: {RedirectURL:}

    UserGroupPrivilegeChangeRequest returns OK or excepts
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        senderName:
        targetName:
        oldRole:
        newRole:
    }

    linkUserToGroupRequest returns linkUserToGroupResponse
    Header: {Authorization: Bearer <Token>, Authorization: ApiKey <Token>}
    Body:
    {
        invite:
        groupName:
    }

    linkUserToGroupResponse
    Header: {RedirectURL: }

Queries Needed:
- Create table Users
- Create table Challenges
- Create table Games
- Create table Leaderboards
- Create table UserLeaderboardInteractions
- create table UserMMR
- Create table LeaderboardInvitations
- Create table UserVerificationLinks

- Get User
Get Challenge
- Get Game
Get Leaderboard
Get UserLeaderboardInteraction
Get User MMR
- Get User Password

- Update Username in Users
- Update Password in Users
- Update Email in Users
Update LeaderboardName in Leaderboards
Update Status of Game in Games
Update GameId Score for UserId
Update Role for UserId in Users
Update Role for UserId in UserLeaderboardInteractions
Update Wins for UserId, LeaderboardId in UserLeaderboardInteractions
Update Losses for UserId, LeaderboardId in UserLeaderboardInteractions

- Insert User into Users
Insert Game into Games
Insert Challenge indto Challenges
Insert Leaderboard into Leaderboards
Insert UserId, LeaderboardId Into UserLeaderboardInteractions
Insert UserId, LeaderboardId mapped to MMR into MMR

- Delete User from Users
- Delete Game from Games
Delete Challenge from Challenges
Delete Leaderboard from Leaderboards
Delete index UserId, LeaderboardId from UserLeaderboardInteractions
Delete key UserId, LeaderboardId from MMR

Data Rules (Special thanks to Mark Roberts for helping to a heavy extent with these):
Challenges will always be in a 1 to 2 relationship with Users
Games will always be in a 1 to 1 relationship with challenges
Users will be in a 1 to n relationship with UserLeaderboardInteractions
LeaderboardInteractions will be in an n to 1 relationship with Users
Leaderboards will always have 1 and only 1 User with the role "owner"
Users in a Game will both share a common LeaderboardId
The ChallengeId is the GameId, The Challenge has a LeaderboardId as well.
A User will have a 1 to n relationship with MMR
MMR is not unique
A UserId is unique
A GameId is unique